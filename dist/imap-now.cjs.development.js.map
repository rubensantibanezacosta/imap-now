{"version":3,"file":"imap-now.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["\n\nimport Imap, { AppendOptions, Box, MailBoxes } from 'imap';\nimport { ParsedMail, simpleParser } from 'mailparser';\n\n\nexport class ImapNow {\n  private imap: Imap;\n\n  constructor(imapConfig: ImapConfig) {\n    this.imap = new Imap(imapConfig);\n  }\n\n\n  /**\n   * Establishes a connection to an IMAP server based on the provided configuration.\n  connecting to the IMAP server.\n   * @returns {Promise<void>} - A promise that resolves to the connected Imap object.\n   */\n  public connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.once('ready', () => {\n        console.log('Connected to IMAP server');\n        resolve();\n      });\n\n      this.imap.once('error', (err: Error) => {\n        console.error('Error connecting to IMAP server');\n        console.error(err);\n        reject(err);\n      });\n\n      this.imap.once('end', () => {\n        console.log('Connection to IMAP server ended');\n      });\n\n      this.imap.connect();\n    });\n  }\n\n  /**\n  * Ends the connection to the IMAP server.\n  * @param {Imap} imap - The Imap object representing the connection.\n  * @returns {Promise<void>} - A promise that resolves when the connection is successfully ended.\n  */\n  public end(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.imap.end();\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n  }\n\n  /**\n  * Destroys the IMAP connection, terminating it abruptly..\n  * @returns {Promise<void>} - A promise that resolves when the connection is successfully destroyed.\n  */\n  public destroy(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.imap.destroy();\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n* Opens a mailbox on the IMAP server.\n* @param {string} mailboxName - The name of the mailbox to open.\n* @returns {Promise<Box>} - A promise that resolves to the opened mailbox.\n*/\n  public openBox(mailboxName: string): Promise<Box> {\n    return new Promise((resolve, reject) => {\n      this.imap.openBox(mailboxName, false, (err, box) => {\n        if (err) {\n          console.error(`Error opening mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(box);\n        }\n      });\n    });\n  }\n\n  /**\n* Closes the currently open mailbox on the IMAP server.\n* @param {string} mailboxName - The name of the mailbox to close.\n* @returns {Promise<void>} - A promise that resolves when the mailbox is successfully closed.\n*/\n  public closeBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.closeBox(true, (err) => {\n        if (err) {\n          console.error(`Error closing mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Gets the list of mailboxes on the IMAP server.\n   * @returns {Promise<MailBoxes>} - A promise that resolves to the list of mailboxes.\n   */\n  public getBoxes(): Promise<MailBoxes> {\n    return new Promise((resolve, reject) => {\n      this.imap.getBoxes('', (err, boxes) => {\n        if (err) {\n          console.error('Error getting mailboxes');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(boxes);\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds a new mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the new mailbox to add.\n   * @returns {Promise<void>} - A promise that resolves when the mailbox is successfully added.\n   */\n  public addBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.addBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error adding mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Deletes a mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the mailbox to delete.\n   * @returns {Promise<void>} - A promise that resolves when the mailbox is successfully deleted.\n   */\n  public deleteBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.delBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error deleting mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Renames a mailbox on the IMAP server.\n   * @param {string} oldMailboxName - The current name of the mailbox.\n   * @param {string} newMailboxName - The new name for the mailbox.\n   * @returns {Promise<void>} - A promise that resolves when the mailbox is successfully renamed.\n   */\n  public renameBox(oldMailboxName: string, newMailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.renameBox(oldMailboxName, newMailboxName, (err) => {\n        if (err) {\n          console.error(`Error renaming mailbox ${oldMailboxName} to ${newMailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Subscribes to a mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the mailbox to subscribe to.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  public subscribeBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.subscribeBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error subscribing to mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n  * Unsubscribes from a mailbox on the IMAP server.\n  * @param {string} mailboxName - The name of the mailbox to unsubscribe from.\n  * @returns {Promise<void>} - A promise that resolves when the unsubscription is successful.\n  */\n  public unsubscribeBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.unsubscribeBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error unsubscribing from mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Retrieves the status of a mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the mailbox to retrieve status for.\n   * @returns {Promise<Box>} - A promise that resolves when the status is successfully retrieved.\n   */\n  public boxStatus(mailboxName: string): Promise<Box> {\n    return new Promise((resolve, reject) => {\n      this.imap.status(mailboxName, (err, box) => {\n        if (err) {\n          console.error(`Error getting status for mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(box);\n        }\n      });\n    });\n  }\n\n  /**\n  * Retrieves the list of mailboxes to which the user is subscribed.\n  * @returns {Promise<MailBoxes>} - A promise that resolves to the list of subscribed mailboxes.\n  */\n  public getSubscribedBoxes(): Promise<MailBoxes> {\n    return new Promise((resolve, reject) => {\n      this.imap.getSubscribedBoxes('', (err, boxes) => {\n        if (err) {\n          console.error('Error getting subscribed mailboxes');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(boxes);\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds a listener for the 'mail' event, triggered when new messages arrive in the mailbox.\n   * @param {(numNewMsgs: number) => void} callback - The callback function to be executed when new messages arrive.\n   */\n  public addMailListener(callback: (numNewMsgs: number) => void): void {\n    this.imap.on('mail', callback);\n  }\n\n  /**\n   * Removes a previously added 'mail' event listener.\n   * @param {(numNewMsgs: number) => void} callback - The callback function to be removed.\n   */\n  public removeMailListener(callback: (numNewMsgs: number) => void): void {\n    this.imap.removeListener('mail', callback);\n  }\n\n  /**\n  * Adds a listener for the 'update' event, triggered when messages in the mailbox are updated.\n  * @param {(seqno: number, info: any) => void} callback - The callback function to be executed when messages are updated.\n  *\n  * seqno - The sequence number of the message that was updated.\n  * Note: If multiple messages are updated at once, this event will be triggered multiple times, once for each message.\n  * This sequence number is not the same as the unique identifier (UID) of the message.\n  * It is used to identify the message within the current mailbox session only.\n  * \n  */\n  public addUpdateListener(callback: (seqno: number, info: any) => void): void {\n    this.imap.on('update', callback);\n  }\n\n  /**\n   * Adds a listener for the 'expunge' event, triggered when messages are deleted from the mailbox.\n   * @param {(seqno: number) => void} callback - The callback function to be executed when messages are expunged.\n   * \n   */\n  public addExpungeListener(callback: (seqno: number) => void): void {\n    this.imap.on('expunge', callback);\n  }\n\n  /**\n   * Removes a previously added 'expunge' event listener.\n   * @param {(seqno: number) => void} callback - The callback function to be removed.\n   * \n   */\n  public removeExpungeListener(callback: (seqno: number) => void): void {\n    this.imap.removeListener('expunge', callback);\n  }\n\n  /**\n   * Adds a listener for the 'close' event, triggered when the connection to the IMAP server is closed.\n   * @param {() => void} callback - The callback function to be executed when the connection is closed.\n   */\n  public addCloseListener(callback: () => void): void {\n    this.imap.on('close', callback);\n  }\n\n  /**\n   * Searches for messages based on the provided search criteria.\n   *\n   * @param {Criteria[]} criteria - An array of search criteria.\n   * @param {SearchOptions} options - Options for the search operation.\n   */\n  public async search(criteria: Criteria[]): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      this.imap.search(criteria, (err, uids) => {\n        if (err) {\n          console.error('Error searching for messages');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(uids);\n        }\n      }\n      );\n    });\n  }\n\n\n\n  private fetchOne(uid: number, options: FetchOptions): Promise<FetchResult[]> {\n    return new Promise((resolve, reject) => {\n      const fetch = this.imap.fetch([uid], options);\n\n      const messages: FetchResult[] = [];\n\n      fetch.on('message', (msg, _seqno) => {\n        const message: FetchResult = {\n          parsedMail: undefined,\n          seen: true,\n          flags: [],\n        };\n\n        msg.on('body', (stream, _info) => {\n          const buffer: Buffer[] = [];\n\n          stream.on('data', (chunk: Buffer) => {\n            buffer.push(chunk);\n          });\n\n          stream.once('end', () => {\n            const bodyBuffer = Buffer.concat(buffer);\n            const body = bodyBuffer.toString('utf8');\n\n\n            simpleParser(body as any, (err, parsed) => {\n              if (err) {\n                reject(err);\n              } else {\n                message.parsedMail = parsed;\n              }\n            });\n\n\n            msg.on('attributes', (attrs) => {\n              message.seen = attrs.flags.includes('\\\\Seen');\n              message.flags = attrs.flags;\n            });\n          });\n\n          msg.once('end', () => {\n            setTimeout(() => {\n              if (message.parsedMail && message.parsedMail.date) {\n                messages.push(message);\n                if (messages.length == 1) {\n                  resolve(messages);\n                }\n              }\n            }, 1000);\n\n          });\n\n          fetch.once('error', (err) => {\n            console.error('Error fetching message');\n            console.error(err);\n            reject(err);\n          });\n        });\n      }\n      );\n    }\n    );\n  }\n\n  /**\n  * Fetches messages based on the provided UIDs and fetch options.\n  * @param {number[]} uid - An array of message UIDs to fetch.\n  * @param {FetchOptions} options - Options for fetching messages.\n  * @returns {Promise<FetchResult[]>} - A promise that resolves to an array of fetched messages.\n  */\n  public async fetch(uids: number[], options: FetchOptions): Promise<FetchResult[]> {\n    const results: FetchResult[] = [];\n    for await (const uid of uids) {\n      const result = await this.fetchOne(uid, options);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  /**\n   * Copies a message from the source to the specified mailbox.\n   * @param {MessageSource} source - The source message to copy.\n   * @param {string} mailboxName - The name of the destination mailbox.\n   * @returns {Promise<void>} - A promise that resolves when the copy operation is complete.\n   */\n  public copy(source: MessageSource, mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.copy(source, mailboxName, (err) => {\n        if (err) {\n          console.error('Error copying message');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Moves a message from the source to the specified mailbox.\n   * @param {MessageSource} source - The source message to move.\n   * @param {string} mailboxName - The name of the destination mailbox.\n   * @returns {Promise<void>} - A promise that resolves when the move operation is complete.\n   */\n  public move(source: MessageSource, mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.move(source, mailboxName, (err) => {\n        if (err) {\n          console.error('Error moving message');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds flags to a message.\n   * @param {MessageSource} source - The source message to add flags to.\n   * @param {any[]} flags - An array of flags to add.\n   * @returns {Promise<void>} - A promise that resolves when the flags are added.\n   */\n  public addFlags(source: MessageSource, flags: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.addFlags(source, flags, (err) => {\n        if (err) {\n          console.error('Error adding flags');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Removes flags from a message.\n   * @param {MessageSource} source - The source message to remove flags from.\n   * @param {any[]} flags - An array of flags to remove.\n   * @returns {Promise<void>} - A promise that resolves when the flags are removed.\n   */\n  public delFlags(source: MessageSource, flags: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.delFlags(source, flags, (err) => {\n        if (err) {\n          console.error('Error removing flags');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Sets flags for a message, removing any existing flags.\n   * @param {MessageSource} source - The source message to set flags for.\n   * @param {any[]} flags - An array of flags to set.\n   * @returns {Promise<void>} - A promise that resolves when the flags are set.\n   */\n  public setFlags(source: MessageSource, flags: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.setFlags(source, flags, (err) => {\n        if (err) {\n          console.error('Error setting flags');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds keywords to a message.\n   * @param {MessageSource} source - The source message to add keywords to.\n   * @param {any[]} keywords - An array of keywords to add.\n   * @returns {Promise<void>} - A promise that resolves when the keywords are added.\n   */\n  public addKeywords(source: MessageSource, keywords: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.addKeywords(source, keywords, (err) => {\n        if (err) {\n          console.error('Error adding keywords');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Removes keywords from a message.\n   * @param {MessageSource} source - The source message to remove keywords from.\n   * @param {any[]} keywords - An array of keywords to remove.\n   * @returns {Promise<void>} - A promise that resolves when the keywords are removed.\n   */\n  public delKeywords(source: MessageSource, keywords: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.delKeywords(source, keywords, (err) => {\n        if (err) {\n          console.error('Error removing keywords');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Sets keywords for a message, removing any existing keywords.\n   * @param {MessageSource} source - The source message to set keywords for.\n   * @param {any[]} keywords - An array of keywords to set.\n   * @returns {Promise<void>} - A promise that resolves when the keywords are set.\n   */\n  public setKeywords(source: MessageSource, keywords: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.setKeywords(source, keywords, (err) => {\n        if (err) {\n          console.error('Error setting keywords');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Checks if the server supports the given capability.\n   * @param {string} capability - The capability to check for.\n   * @returns {boolean} - True if the server supports the capability; otherwise, false.\n   */\n  public serverSupports(capability: string): boolean {\n    return this.imap.serverSupports(capability);\n  }\n\n  /**\n   * Permanently removes messages flagged as Deleted in the currently open mailbox.\n   * If the server supports the 'UIDPLUS' capability, uids can be supplied to only remove\n   * messages that both have their uid in uids and have the \\Deleted flag set.\n   * @param {MessageSource} uids - An optional array of message UIDs to expunge.\n   * @returns {Promise<void>} - A promise that resolves when the expunge operation is successful.\n   * @see https://www.npmjs.com/package/imap#expungeuids--function-callback\n   */\n  public expunge(uids?: MessageSource): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.expunge(uids, (err) => {\n        if (err) {\n          console.error('Error expunging messages');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Appends a message to a selected mailbox on the IMAP server.\n   * @param {string | Buffer} msgData - The message data to be appended (RFC-822 compatible MIME message).\n   * @param {AppendOptions} options - Additional options for the append operation.\n   * @returns {Promise<void>} - A promise that resolves when the append operation is successful.\n   * @see https://www.npmjs.com/package/imap#appendmixed-msgdata-object-options-function-callback-void\n   */\n  public append(msgData: string | Buffer, options: AppendOptions): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.append(msgData, options, (err) => {\n        if (err) {\n          console.error('Error appending message');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n}\n\n\n\n\n\n/**\n * Configuration options for establishing a connection with an IMAP server.\n */\nexport type ImapConfig = {\n  user: string;\n  password: string;\n  host: string;\n  port: number;\n  tls: boolean;\n  xoauth2?: string;\n  xoauth?: string;\n  tlsOptions?: any;\n  autotls?: 'always' | 'required' | 'never';\n  connTimeout?: number;\n  authTimeout?: number;\n  socketTimeout?: number;\n  keepalive?: boolean | {\n    interval?: number;\n    idleInterval?: number;\n    forceNoop?: boolean;\n  };\n  debug?: (info: string) => void;\n};\n\n/**\n * Criteria export type without arguments used in IMAP search.\n */\nexport type CriteriaTypeWithoutArguments =\n  | 'ALL'\n  | 'ANSWERED'\n  | 'DELETED'\n  | 'DRAFT'\n  | 'FLAGGED'\n  | 'NEW'\n  | 'SEEN'\n  | 'RECENT'\n  | 'OLD'\n  | 'UNANSWERED'\n  | 'UNDELETED'\n  | 'UNDRAFT'\n  | 'UNFLAGGED'\n  | 'UNSEEN';\n\n/**\n* Criteria export type with arguments used in IMAP search.\n*/\nexport type CriteriaTypeWithArguments =\n  | 'BCC'\n  | 'CC'\n  | 'FROM'\n  | 'SUBJECT'\n  | 'TO'\n  | 'BODY'\n  | 'TEXT'\n  | 'KEYWORD'\n  | 'HEADER';\n\n/**\n* Date criteria export type used in IMAP search.\n*/\nexport type DateCriteriaType =\n  | 'BEFORE'\n  | 'ON'\n  | 'SINCE'\n  | 'SENTBEFORE'\n  | 'SENTON'\n  | 'SENTSINCE';\n\n/**\n * Integer criteria export type used in IMAP search.\n */\nexport type IntegerCriteriaType = 'LARGER' | 'SMALLER';\n\n/**\n * Array criteria export type used in IMAP search.\n */\nexport type ArrayCriteriaType = 'UID';\n\n/**\n * All possible criteria export types used in IMAP search.\n */\nexport type CriteriaType =\n  | CriteriaTypeWithoutArguments\n  | CriteriaTypeWithArguments\n  | DateCriteriaType\n  | IntegerCriteriaType\n  | ArrayCriteriaType;\n\n/**\n* Criteria used in IMAP search.\n*/\nexport type Criteria = CriteriaType | [CriteriaType, ...any[]];\n\n/**\n * Callback export type for IMAP operations.\n */\nexport type Callback = (err: Error | null, UIDs: number[]) => void;\n\n/**\n * Type representing the source of a message in IMAP operations.\n */\nexport type MessageSource = string | number | number[];\n\n/**\n * Extra IMAP capabilities.\n * @see https://www.npmjs.com/package/imap\n */\nexport type Capability = \"X-GM-EXT-1\" | \"QUOTA\" | \"UIDPLUS\" | \"CONDSTORE\" | \"ESEARCH\" | \"SORT\";\n\nexport type FetchOptions = {\n  bodies: string[];\n  struct: boolean;\n};\n\nexport type FetchResult = {\n  parsedMail?: ParsedMail;\n  seen?: boolean;\n  flags: string[];\n};\n\n\n"],"names":["ImapNow","imapConfig","imap","Imap","_proto","prototype","connect","Promise","resolve","reject","_this","once","console","log","err","error","end","_this2","destroy","_this3","openBox","mailboxName","_this4","box","closeBox","_this5","getBoxes","_this6","boxes","addBox","_this7","deleteBox","_this8","delBox","renameBox","oldMailboxName","newMailboxName","_this9","subscribeBox","_this10","unsubscribeBox","_this11","boxStatus","_this12","status","getSubscribedBoxes","_this13","addMailListener","callback","on","removeMailListener","removeListener","addUpdateListener","addExpungeListener","removeExpungeListener","addCloseListener","search","_search","_asyncToGenerator","_regeneratorRuntime","mark","_callee","criteria","_this14","wrap","_callee$","_context","prev","next","abrupt","uids","stop","_x","apply","arguments","fetchOne","uid","options","fetch","_this15","messages","msg","_seqno","message","parsedMail","undefined","seen","flags","stream","_info","buffer","chunk","push","bodyBuffer","Buffer","concat","body","toString","simpleParser","parsed","attrs","includes","setTimeout","date","length","_fetch","_callee2","results","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","result","_callee2$","_context2","_asyncIterator","sent","done","value","t0","finish","_x2","_x3","copy","source","_this16","move","_this17","addFlags","_this18","delFlags","_this19","setFlags","_this20","addKeywords","keywords","_this21","delKeywords","_this22","setKeywords","_this23","serverSupports","capability","expunge","_this24","append","msgData","_this25"],"mappings":"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"}