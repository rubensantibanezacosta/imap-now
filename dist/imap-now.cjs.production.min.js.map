{"version":3,"file":"imap-now.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["\n\nimport Imap, { AppendOptions, Box, MailBoxes } from 'imap';\nimport { ParsedMail, simpleParser } from 'mailparser';\n\n\nexport class ImapNow {\n  private imap: Imap;\n\n  constructor(imapConfig: ImapConfig) {\n    this.imap = new Imap(imapConfig);\n  }\n\n\n  /**\n   * Establishes a connection to an IMAP server based on the provided configuration.\n  connecting to the IMAP server.\n   * @returns {Promise<void>} - A promise that resolves to the connected Imap object.\n   */\n  public connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.once('ready', () => {\n        console.log('Connected to IMAP server');\n        resolve();\n      });\n\n      this.imap.once('error', (err: Error) => {\n        console.error('Error connecting to IMAP server');\n        console.error(err);\n        reject(err);\n      });\n\n      this.imap.once('end', () => {\n        console.log('Connection to IMAP server ended');\n      });\n\n      this.imap.connect();\n    });\n  }\n\n  /**\n  * Ends the connection to the IMAP server.\n  * @param {Imap} imap - The Imap object representing the connection.\n  * @returns {Promise<void>} - A promise that resolves when the connection is successfully ended.\n  */\n  public end(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.imap.end();\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n  }\n\n  /**\n  * Destroys the IMAP connection, terminating it abruptly..\n  * @returns {Promise<void>} - A promise that resolves when the connection is successfully destroyed.\n  */\n  public destroy(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.imap.destroy();\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n* Opens a mailbox on the IMAP server.\n* @param {string} mailboxName - The name of the mailbox to open.\n* @returns {Promise<Box>} - A promise that resolves to the opened mailbox.\n*/\n  public openBox(mailboxName: string): Promise<Box> {\n    return new Promise((resolve, reject) => {\n      this.imap.openBox(mailboxName, false, (err, box) => {\n        if (err) {\n          console.error(`Error opening mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(box);\n        }\n      });\n    });\n  }\n\n  /**\n* Closes the currently open mailbox on the IMAP server.\n* @param {string} mailboxName - The name of the mailbox to close.\n* @returns {Promise<void>} - A promise that resolves when the mailbox is successfully closed.\n*/\n  public closeBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.closeBox(true, (err) => {\n        if (err) {\n          console.error(`Error closing mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Gets the list of mailboxes on the IMAP server.\n   * @returns {Promise<MailBoxes>} - A promise that resolves to the list of mailboxes.\n   */\n  public getBoxes(): Promise<MailBoxes> {\n    return new Promise((resolve, reject) => {\n      this.imap.getBoxes('', (err, boxes) => {\n        if (err) {\n          console.error('Error getting mailboxes');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(boxes);\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds a new mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the new mailbox to add.\n   * @returns {Promise<void>} - A promise that resolves when the mailbox is successfully added.\n   */\n  public addBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.addBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error adding mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Deletes a mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the mailbox to delete.\n   * @returns {Promise<void>} - A promise that resolves when the mailbox is successfully deleted.\n   */\n  public deleteBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.delBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error deleting mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Renames a mailbox on the IMAP server.\n   * @param {string} oldMailboxName - The current name of the mailbox.\n   * @param {string} newMailboxName - The new name for the mailbox.\n   * @returns {Promise<void>} - A promise that resolves when the mailbox is successfully renamed.\n   */\n  public renameBox(oldMailboxName: string, newMailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.renameBox(oldMailboxName, newMailboxName, (err) => {\n        if (err) {\n          console.error(`Error renaming mailbox ${oldMailboxName} to ${newMailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Subscribes to a mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the mailbox to subscribe to.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  public subscribeBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.subscribeBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error subscribing to mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n  * Unsubscribes from a mailbox on the IMAP server.\n  * @param {string} mailboxName - The name of the mailbox to unsubscribe from.\n  * @returns {Promise<void>} - A promise that resolves when the unsubscription is successful.\n  */\n  public unsubscribeBox(mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.unsubscribeBox(mailboxName, (err) => {\n        if (err) {\n          console.error(`Error unsubscribing from mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Retrieves the status of a mailbox on the IMAP server.\n   * @param {string} mailboxName - The name of the mailbox to retrieve status for.\n   * @returns {Promise<Box>} - A promise that resolves when the status is successfully retrieved.\n   */\n  public boxStatus(mailboxName: string): Promise<Box> {\n    return new Promise((resolve, reject) => {\n      this.imap.status(mailboxName, (err, box) => {\n        if (err) {\n          console.error(`Error getting status for mailbox ${mailboxName}`);\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(box);\n        }\n      });\n    });\n  }\n\n  /**\n  * Retrieves the list of mailboxes to which the user is subscribed.\n  * @returns {Promise<MailBoxes>} - A promise that resolves to the list of subscribed mailboxes.\n  */\n  public getSubscribedBoxes(): Promise<MailBoxes> {\n    return new Promise((resolve, reject) => {\n      this.imap.getSubscribedBoxes('', (err, boxes) => {\n        if (err) {\n          console.error('Error getting subscribed mailboxes');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(boxes);\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds a listener for the 'mail' event, triggered when new messages arrive in the mailbox.\n   * @param {(numNewMsgs: number) => void} callback - The callback function to be executed when new messages arrive.\n   */\n  public addMailListener(callback: (numNewMsgs: number) => void): void {\n    this.imap.on('mail', callback);\n  }\n\n  /**\n   * Removes a previously added 'mail' event listener.\n   * @param {(numNewMsgs: number) => void} callback - The callback function to be removed.\n   */\n  public removeMailListener(callback: (numNewMsgs: number) => void): void {\n    this.imap.removeListener('mail', callback);\n  }\n\n  /**\n  * Adds a listener for the 'update' event, triggered when messages in the mailbox are updated.\n  * @param {(seqno: number, info: any) => void} callback - The callback function to be executed when messages are updated.\n  *\n  * seqno - The sequence number of the message that was updated.\n  * Note: If multiple messages are updated at once, this event will be triggered multiple times, once for each message.\n  * This sequence number is not the same as the unique identifier (UID) of the message.\n  * It is used to identify the message within the current mailbox session only.\n  * \n  */\n  public addUpdateListener(callback: (seqno: number, info: any) => void): void {\n    this.imap.on('update', callback);\n  }\n\n  /**\n   * Adds a listener for the 'expunge' event, triggered when messages are deleted from the mailbox.\n   * @param {(seqno: number) => void} callback - The callback function to be executed when messages are expunged.\n   * \n   */\n  public addExpungeListener(callback: (seqno: number) => void): void {\n    this.imap.on('expunge', callback);\n  }\n\n  /**\n   * Removes a previously added 'expunge' event listener.\n   * @param {(seqno: number) => void} callback - The callback function to be removed.\n   * \n   */\n  public removeExpungeListener(callback: (seqno: number) => void): void {\n    this.imap.removeListener('expunge', callback);\n  }\n\n  /**\n   * Adds a listener for the 'close' event, triggered when the connection to the IMAP server is closed.\n   * @param {() => void} callback - The callback function to be executed when the connection is closed.\n   */\n  public addCloseListener(callback: () => void): void {\n    this.imap.on('close', callback);\n  }\n\n  /**\n   * Searches for messages based on the provided search criteria.\n   *\n   * @param {Criteria[]} criteria - An array of search criteria.\n   * @param {SearchOptions} options - Options for the search operation.\n   */\n  public async search(criteria: Criteria[]): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      this.imap.search(criteria, (err, uids) => {\n        if (err) {\n          console.error('Error searching for messages');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve(uids);\n        }\n      }\n      );\n    });\n  }\n\n\n\n  private fetchOne(uid: number, options: FetchOptions): Promise<FetchResult[]> {\n    return new Promise((resolve, reject) => {\n      const fetch = this.imap.fetch([uid], options);\n\n      const messages: FetchResult[] = [];\n\n      fetch.on('message', (msg, _seqno) => {\n        const message: FetchResult = {\n          parsedMail: undefined,\n          seen: true,\n          flags: [],\n        };\n\n        msg.on('body', (stream, _info) => {\n          const buffer: Buffer[] = [];\n\n          stream.on('data', (chunk: Buffer) => {\n            buffer.push(chunk);\n          });\n\n          stream.once('end', () => {\n            const bodyBuffer = Buffer.concat(buffer);\n            const body = bodyBuffer.toString('utf8');\n\n\n            simpleParser(body as any, (err, parsed) => {\n              if (err) {\n                reject(err);\n              } else {\n                message.parsedMail = parsed;\n              }\n            });\n\n\n            msg.on('attributes', (attrs) => {\n              message.seen = attrs.flags.includes('\\\\Seen');\n              message.flags = attrs.flags;\n            });\n          });\n\n          msg.once('end', () => {\n            setTimeout(() => {\n              if (message.parsedMail && message.parsedMail.date) {\n                messages.push(message);\n                if (messages.length == 1) {\n                  resolve(messages);\n                }\n              }\n            }, 1000);\n\n          });\n\n          fetch.once('error', (err) => {\n            console.error('Error fetching message');\n            console.error(err);\n            reject(err);\n          });\n        });\n      }\n      );\n    }\n    );\n  }\n\n  /**\n  * Fetches messages based on the provided UIDs and fetch options.\n  * @param {number[]} uid - An array of message UIDs to fetch.\n  * @param {FetchOptions} options - Options for fetching messages.\n  * @returns {Promise<FetchResult[]>} - A promise that resolves to an array of fetched messages.\n  */\n  public async fetch(uids: number[], options: FetchOptions): Promise<FetchResult[]> {\n    const results: FetchResult[] = [];\n    for await (const uid of uids) {\n      const result = await this.fetchOne(uid, options);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  /**\n   * Copies a message from the source to the specified mailbox.\n   * @param {MessageSource} source - The source message to copy.\n   * @param {string} mailboxName - The name of the destination mailbox.\n   * @returns {Promise<void>} - A promise that resolves when the copy operation is complete.\n   */\n  public copy(source: MessageSource, mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.copy(source, mailboxName, (err) => {\n        if (err) {\n          console.error('Error copying message');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Moves a message from the source to the specified mailbox.\n   * @param {MessageSource} source - The source message to move.\n   * @param {string} mailboxName - The name of the destination mailbox.\n   * @returns {Promise<void>} - A promise that resolves when the move operation is complete.\n   */\n  public move(source: MessageSource, mailboxName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.move(source, mailboxName, (err) => {\n        if (err) {\n          console.error('Error moving message');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds flags to a message.\n   * @param {MessageSource} source - The source message to add flags to.\n   * @param {any[]} flags - An array of flags to add.\n   * @returns {Promise<void>} - A promise that resolves when the flags are added.\n   */\n  public addFlags(source: MessageSource, flags: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.addFlags(source, flags, (err) => {\n        if (err) {\n          console.error('Error adding flags');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Removes flags from a message.\n   * @param {MessageSource} source - The source message to remove flags from.\n   * @param {any[]} flags - An array of flags to remove.\n   * @returns {Promise<void>} - A promise that resolves when the flags are removed.\n   */\n  public delFlags(source: MessageSource, flags: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.delFlags(source, flags, (err) => {\n        if (err) {\n          console.error('Error removing flags');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Sets flags for a message, removing any existing flags.\n   * @param {MessageSource} source - The source message to set flags for.\n   * @param {any[]} flags - An array of flags to set.\n   * @returns {Promise<void>} - A promise that resolves when the flags are set.\n   */\n  public setFlags(source: MessageSource, flags: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.setFlags(source, flags, (err) => {\n        if (err) {\n          console.error('Error setting flags');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds keywords to a message.\n   * @param {MessageSource} source - The source message to add keywords to.\n   * @param {any[]} keywords - An array of keywords to add.\n   * @returns {Promise<void>} - A promise that resolves when the keywords are added.\n   */\n  public addKeywords(source: MessageSource, keywords: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.addKeywords(source, keywords, (err) => {\n        if (err) {\n          console.error('Error adding keywords');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Removes keywords from a message.\n   * @param {MessageSource} source - The source message to remove keywords from.\n   * @param {any[]} keywords - An array of keywords to remove.\n   * @returns {Promise<void>} - A promise that resolves when the keywords are removed.\n   */\n  public delKeywords(source: MessageSource, keywords: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.delKeywords(source, keywords, (err) => {\n        if (err) {\n          console.error('Error removing keywords');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Sets keywords for a message, removing any existing keywords.\n   * @param {MessageSource} source - The source message to set keywords for.\n   * @param {any[]} keywords - An array of keywords to set.\n   * @returns {Promise<void>} - A promise that resolves when the keywords are set.\n   */\n  public setKeywords(source: MessageSource, keywords: any[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.setKeywords(source, keywords, (err) => {\n        if (err) {\n          console.error('Error setting keywords');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Checks if the server supports the given capability.\n   * @param {string} capability - The capability to check for.\n   * @returns {boolean} - True if the server supports the capability; otherwise, false.\n   */\n  public serverSupports(capability: string): boolean {\n    return this.imap.serverSupports(capability);\n  }\n\n  /**\n   * Permanently removes messages flagged as Deleted in the currently open mailbox.\n   * If the server supports the 'UIDPLUS' capability, uids can be supplied to only remove\n   * messages that both have their uid in uids and have the \\Deleted flag set.\n   * @param {MessageSource} uids - An optional array of message UIDs to expunge.\n   * @returns {Promise<void>} - A promise that resolves when the expunge operation is successful.\n   * @see https://www.npmjs.com/package/imap#expungeuids--function-callback\n   */\n  public expunge(uids?: MessageSource): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.expunge(uids, (err) => {\n        if (err) {\n          console.error('Error expunging messages');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Appends a message to a selected mailbox on the IMAP server.\n   * @param {string | Buffer} msgData - The message data to be appended (RFC-822 compatible MIME message).\n   * @param {AppendOptions} options - Additional options for the append operation.\n   * @returns {Promise<void>} - A promise that resolves when the append operation is successful.\n   * @see https://www.npmjs.com/package/imap#appendmixed-msgdata-object-options-function-callback-void\n   */\n  public append(msgData: string | Buffer, options: AppendOptions): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.imap.append(msgData, options, (err) => {\n        if (err) {\n          console.error('Error appending message');\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n}\n\n\n\n\n\n/**\n * Configuration options for establishing a connection with an IMAP server.\n */\nexport type ImapConfig = {\n  user: string;\n  password: string;\n  host: string;\n  port: number;\n  tls: boolean;\n  xoauth2?: string;\n  xoauth?: string;\n  tlsOptions?: any;\n  autotls?: 'always' | 'required' | 'never';\n  connTimeout?: number;\n  authTimeout?: number;\n  socketTimeout?: number;\n  keepalive?: boolean | {\n    interval?: number;\n    idleInterval?: number;\n    forceNoop?: boolean;\n  };\n  debug?: (info: string) => void;\n};\n\n/**\n * Criteria export type without arguments used in IMAP search.\n */\nexport type CriteriaTypeWithoutArguments =\n  | 'ALL'\n  | 'ANSWERED'\n  | 'DELETED'\n  | 'DRAFT'\n  | 'FLAGGED'\n  | 'NEW'\n  | 'SEEN'\n  | 'RECENT'\n  | 'OLD'\n  | 'UNANSWERED'\n  | 'UNDELETED'\n  | 'UNDRAFT'\n  | 'UNFLAGGED'\n  | 'UNSEEN';\n\n/**\n* Criteria export type with arguments used in IMAP search.\n*/\nexport type CriteriaTypeWithArguments =\n  | 'BCC'\n  | 'CC'\n  | 'FROM'\n  | 'SUBJECT'\n  | 'TO'\n  | 'BODY'\n  | 'TEXT'\n  | 'KEYWORD'\n  | 'HEADER';\n\n/**\n* Date criteria export type used in IMAP search.\n*/\nexport type DateCriteriaType =\n  | 'BEFORE'\n  | 'ON'\n  | 'SINCE'\n  | 'SENTBEFORE'\n  | 'SENTON'\n  | 'SENTSINCE';\n\n/**\n * Integer criteria export type used in IMAP search.\n */\nexport type IntegerCriteriaType = 'LARGER' | 'SMALLER';\n\n/**\n * Array criteria export type used in IMAP search.\n */\nexport type ArrayCriteriaType = 'UID';\n\n/**\n * All possible criteria export types used in IMAP search.\n */\nexport type CriteriaType =\n  | CriteriaTypeWithoutArguments\n  | CriteriaTypeWithArguments\n  | DateCriteriaType\n  | IntegerCriteriaType\n  | ArrayCriteriaType;\n\n/**\n* Criteria used in IMAP search.\n*/\nexport type Criteria = CriteriaType | [CriteriaType, ...any[]];\n\n/**\n * Callback export type for IMAP operations.\n */\nexport type Callback = (err: Error | null, UIDs: number[]) => void;\n\n/**\n * Type representing the source of a message in IMAP operations.\n */\nexport type MessageSource = string | number | number[];\n\n/**\n * Extra IMAP capabilities.\n * @see https://www.npmjs.com/package/imap\n */\nexport type Capability = \"X-GM-EXT-1\" | \"QUOTA\" | \"UIDPLUS\" | \"CONDSTORE\" | \"ESEARCH\" | \"SORT\";\n\nexport type FetchOptions = {\n  bodies: string[];\n  struct: boolean;\n};\n\nexport type FetchResult = {\n  parsedMail?: ParsedMail;\n  seen?: boolean;\n  flags: string[];\n};\n\n\n"],"names":["ImapNow","imapConfig","this","imap","Imap","_proto","prototype","connect","Promise","resolve","reject","_this","once","console","log","err","error","end","_this2","destroy","_this3","openBox","mailboxName","_this4","box","closeBox","_this5","getBoxes","_this6","boxes","addBox","_this7","deleteBox","_this8","delBox","renameBox","oldMailboxName","newMailboxName","_this9","subscribeBox","_this10","unsubscribeBox","_this11","boxStatus","_this12","status","getSubscribedBoxes","_this13","addMailListener","callback","on","removeMailListener","removeListener","addUpdateListener","addExpungeListener","removeExpungeListener","addCloseListener","search","_search","_asyncToGenerator","_regeneratorRuntime","mark","_callee","criteria","_this14","wrap","_context","prev","next","abrupt","uids","stop","_x","apply","arguments","fetchOne","uid","options","fetch","_this15","messages","msg","_seqno","message","parsedMail","undefined","seen","flags","stream","_info","buffer","chunk","push","body","Buffer","concat","toString","simpleParser","parsed","attrs","includes","setTimeout","date","length","_fetch","_callee2","results","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context2","_asyncIterator","sent","done","value","t0","finish","_x2","_x3","copy","source","_this16","move","_this17","addFlags","_this18","delFlags","_this19","setFlags","_this20","addKeywords","keywords","_this21","delKeywords","_this22","setKeywords","_this23","serverSupports","capability","expunge","_this24","append","msgData","_this25"],"mappings":"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"}